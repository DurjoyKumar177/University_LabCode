% --------------------------------------------
% Traveling Salesman Problem (TSP): 
% একটি শহর থেকে শুরু করে সব শহর একবার ঘুরে আবার সেই শহরে ফিরে আসার সবচেয়ে কম খরচের পথ খুঁজে বের করা
% --------------------------------------------

% --------------------------------------------
% শহরগুলোর মধ্যে সংযোগ (edge) এবং তাদের দূরত্ব (distance) সংজ্ঞায়িত
% --------------------------------------------
edge(a, b, 10). edge(a, c, 15). edge(a, d, 20).
edge(b, a, 10). edge(b, c, 35). edge(b, d, 25).
edge(c, a, 15). edge(c, b, 35). edge(c, d, 30).
edge(d, a, 20). edge(d, b, 25). edge(d, c, 30).

% --------------------------------------------
% একটি নির্দিষ্ট পথের মোট খরচ (cost) গণনা করে
% --------------------------------------------

% যখন তালিকায় শুধুমাত্র একটি উপাদান থাকে, তখন খরচ ০
path_cost([_], 0).

% যদি তালিকায় একাধিক উপাদান থাকে: [A, B | Rest]
% A থেকে B-তে যাওয়ার খরচ বের করো (edge থেকে), তারপর B থেকে পরবর্তী গন্তব্যগুলোর খরচ যোগ করো
path_cost([A, B | Rest], Cost) :-
    edge(A, B, C),                     % A থেকে B-তে যাওয়ার খরচ C
    path_cost([B | Rest], RestCost),  % B থেকে পরবর্তী গন্তব্যগুলোর খরচ বের করো
    Cost is C + RestCost.             % মোট খরচ হিসাব করো

% --------------------------------------------
% মূল ফাংশন: সর্বনিম্ন খরচসহ পথ বের করে (TSP Solver)
% --------------------------------------------

tsp(Start, Route, MinCost) :-
    % findall দিয়ে সব সম্ভাব্য route বের করি এবং সেগুলোর খরচ বের করি
    findall(
        [Cost, R],                      % প্রতিটি route এর খরচ সহ
        (
            permute([b, c, d], P),      % b, c, d এর সব permutation (Start শহর বাদে)
            append([Start | P], [Start], R),  % Start থেকে শুরু করে সব শহর ঘুরে আবার Start-এ ফিরে আসা
            path_cost(R, Cost)          % এই পথের মোট খরচ বের করা
        ),
        Routes                          % সব সম্ভাব্য route এবং তাদের cost এর লিস্ট
    ),
    min_member([MinCost, Route], Routes).  % সবচেয়ে কম খরচের route খুঁজে বের করো

% --------------------------------------------
% permute: একটি লিস্টের সব possible permutation বের করে (helper function)
% --------------------------------------------
permute([], []).                      % খালি লিস্টের permutation খালি লিস্ট
permute(L, [H | T]) :-               
    select(H, L, R),                  % H কে নির্বাচন করি এবং অবশিষ্ট L থেকে H বাদ দেই → R
    permute(R, T).                    % অবশিষ্ট থেকে recursively permutation বের করি

% --------------------------------------------
% উদাহরণ কুয়েরি:
% ?- tsp(a, Route, Cost).
% মানে: শহর a থেকে শুরু করে সব শহর ঘুরে আবার a-তে ফেরার সবচেয়ে সস্তা পথ এবং খরচ খুঁজে বের করো।
% --------------------------------------------

উদাহরণ ব্যাখ্যা:

permute([b, c, d], P) → b, c, d এর সব সম্ভাব্য ক্রম বের করে

append([a | P], [a], R) → a থেকে শুরু করে সব শহর ঘুরে আবার a তে ফেরা

path_cost(R, Cost) → এই route এর মোট দূরত্ব বা খরচ

min_member([MinCost, Route], Routes) → সব route এর মধ্যে যেটার খরচ সবচেয়ে কম, সেটি নির্বাচন করা হয়।
