% -------------------------------
% ৮-পাজল সমস্যার সমাধান (DFS দিয়ে)
% -------------------------------

% প্রাথমিক অবস্থা (initial state) যেখানে ব্ল্যাঙ্ক (0) নিচে ডানে আছে
initial_state([1, 2, 3, 4, 5, 6, 7, 8, 0]).

% লক্ষ্য অবস্থা (goal state) যেখানে পাজল সঠিকভাবে সাজানো আছে
goal_state([1, 2, 3, 4, 5, 6, 7, 8, 0]).

% -------------------------------
% move/2 প্রেডিকেট বিভিন্ন দিক দিয়ে ব্ল্যাঙ্ক স্পেস (0) সরায়
% প্রতিটি move একটি নতুন স্টেট তৈরি করে
% -------------------------------

% ব্ল্যাঙ্ক স্পেস (0) ডান দিকে সরানো (শেষে আছে, ডানে আর কিছু নেই → invalid)
move([A, B, C, D, E, F, G, H, 0], [A, B, C, D, 0, F, G, H, E]). % E ↔ 0

% ব্ল্যাঙ্ক স্পেস নিচে সরানো (E ↔ G)
move([A, B, C, D, E, F, G, H, 0], [A, B, C, D, E, F, 0, H, G]).

% ব্ল্যাঙ্ক স্পেস বামে সরানো (H ↔ 0)
move([A, B, C, D, E, F, G, 0, H], [A, B, C, D, E, F, 0, G, H]).

% ব্ল্যাঙ্ক স্পেস উপরে সরানো (F ↔ 0)
move([A, B, C, D, E, F, 0, G, H], [A, B, C, D, 0, F, E, G, H]).

% -------------------------------
% solve/2 প্রেডিকেট মূল DFS সার্চ চালায়
% solve(+InitialState, -Path)
% -------------------------------
solve(State, Path) :-
    goal_state(Goal),                      % লক্ষ্য অবস্থাটি goal_state থেকে নেই
    dfs(State, Goal, [State], Path).       % DFS কল করি, এবং ভিজিটেড লিস্টে initial state রাখি

% -------------------------------
% DFS সফল সমাপ্তি: বর্তমান স্টেট goal হলে, পাথই সমাধান
% -------------------------------
dfs(State, Goal, Path, Path) :-
    State = Goal.  % যদি বর্তমান স্টেট লক্ষ্য স্টেটের সমান হয়, তাহলে পাথই সমাধান

% -------------------------------
% DFS চালিয়ে পরবর্তী স্টেট খুঁজে বের করা
% -------------------------------
dfs(State, Goal, Visited, Path) :-
    move(State, NextState),                    % বর্তমান state থেকে move করে পরবর্তী state পাই
    \+ member(NextState, Visited),             % যেই state আগে ভিজিট করা হয়নি শুধু তাই নিচ্ছি
    dfs(NextState, Goal, [NextState | Visited], Path). % রিকার্সিভভাবে DFS চালাই, নতুন state ভিজিটেড লিস্টে যোগ করি

% -------------------------------
% কুয়েরির একটি উদাহরণ:
% ?- initial_state(State), solve(State, Path).
% এটি solve/2 চালাবে এবং Path-এ সমাধান রিটার্ন করবে
% -------------------------------
